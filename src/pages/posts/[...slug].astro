---
import { getCollection } from "astro:content";
import lib from "zenn-markdown-html";
import "zenn-content-css";
import TagTips from "../../components/TagTips.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { formatDateToJapanese } from "../../utils/format-date";
import LikeButton from "../../components/LikeButton.astro";
import PostCardGrid from "../../components/PostCardGrid.astro";
import NavigationButton from "../../components/NavigationButton.astro";

export async function getStaticPaths() {
  const allPosts = await getCollection("posts");
  return allPosts.map((post) => {
    const primaryTag = post.data.tags[0];
    if (primaryTag === undefined) {
      throw new Error(
        "No tags specified for the post. Each post must have at least one tag."
      );
    }
    const filteredPosts = allPosts.filter(
      (v) => v.data.tags.includes(primaryTag) && v.id !== post.id
    );
    const descPosts = filteredPosts.sort(
      (a, b) =>
        new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
    );
    return {
      params: { slug: post.id },
      props: { post, relatedPosts: descPosts.slice(0, 4) }
    };
  });
}

const { post, relatedPosts } = Astro.props;

// https://zenn.dev/rorisutarou/articles/ec3871ec55693d#2.-zenn-markdown-html%E3%82%92%E4%BD%BF%E3%81%86
// @ts-ignore
const markdownToHtml = lib.default ? lib.default : lib;
const content = markdownToHtml(post.body!, {
  embedOrigin: "https://embed.zenn.studio"
});

const primaryTag = post.data.tags[0];
if (primaryTag === undefined) {
  throw new Error(
    "No tags specified for the post. Each post must have at least one tag."
  );
}
---

<BaseLayout title={post.data.title} description={post.data.description}>
  <article class="mb-24">
    <div class="mb-10 flex flex-col items-center">
      <span class="py-4 text-8xl">{post.data.emoji}</span>
      <h1 class="mb-7 text-3xl font-semibold">{post.data.title}</h1>
      <div class="flex gap-12">
        <div class="my-1 flex items-center gap-2">
          <time
            class="text-gray-500 dark:text-gray-400"
            datetime={post.data.pubDate.toISOString()}
            >{formatDateToJapanese(post.data.pubDate)}</time
          >
        </div>
      </div>
    </div>
    <div class="mb-6">
      <TagTips tags={post.data.tags} />
    </div>
    <div class="znc">
      <Fragment set:html={content} />
    </div>
    <div class="mt-20">
      <LikeButton server:defer postSlug={post.id} />
    </div>
  </article>

  {
    relatedPosts.length > 0 && (
      <section class="mb-20">
        <h2 class="mb-7 text-2xl font-semibold">Related Posts</h2>
        <div class="mb-6">
          <TagTips tags={[primaryTag]} />
        </div>
        <PostCardGrid posts={relatedPosts} />
        <div class="mt-8 flex justify-end">
          <NavigationButton href={`/tags/${primaryTag}`}>
            See More â†’
          </NavigationButton>
        </div>
      </section>
    )
  }
</BaseLayout>
